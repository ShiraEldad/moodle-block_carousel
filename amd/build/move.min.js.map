{"version":3,"file":"move.min.js","sources":["../src/move.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Drag and drop order handler. This is adapted from the XMLDB editor in 3.6+\n *\n * @module    block_carousel/move\n * @copyright 2020 Peter Burnett <peterburnett@catalyst-au.net>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'core/sortable_list', 'core/ajax', 'core/notification'], function($, SortableList, Ajax, Notification) {\n    return {\n        init: function(blockId) {\n            // Initialise sortable for the given list.\n            var sort = new SortableList($('#slidetable' + ' tbody'));\n\n            sort.getElementName = function(element) {\n                return $.Deferred().resolve(element.attr('data-name'));\n            };\n            var origIndex;\n            $('tr.slidetable').on(SortableList.EVENTS.DRAGSTART, function(_, info) {\n                // Remember position of the element in the beginning of dragging.\n                origIndex = info.sourceList.children().index(info.element);\n                // Resize the \"proxy\" element to be the same width as the main element.\n                setTimeout(function() {\n                    $('.sortable-list-is-dragged').width(info.element.width());\n                }, 501);\n            }).on(SortableList.EVENTS.DROP, function(_, info) {\n                // When a list element was moved send AJAX request to the server.\n                var newIndex = info.targetList.children().index(info.element);\n                var t = info.element.find('[data-action=move]');\n                if (info.positionChanged) {\n                    var request = {\n                        methodname: 'block_carousel_update_slide_order',\n                        args: {\n                            blockid: blockId,\n                            rowid: t.attr('data-rowid'),\n                            position: newIndex - origIndex\n                        }\n                    };\n                    Ajax.call([request])[0].fail(Notification.exception);\n                }\n            });\n        }\n    };\n});\n"],"names":["define","$","SortableList","Ajax","Notification","init","blockId","origIndex","getElementName","element","Deferred","resolve","attr","on","EVENTS","DRAGSTART","_","info","sourceList","children","index","setTimeout","width","DROP","newIndex","targetList","t","find","positionChanged","request","methodname","args","blockid","rowid","position","call","fail","exception"],"mappings":";;;;;;;AAsBAA,6BAAO,CAAC,SAAU,qBAAsB,YAAa,sBAAsB,SAASC,EAAGC,aAAcC,KAAMC,oBAChG,CACHC,KAAM,SAASC,aAOPC,UALO,IAAIL,aAAaD,EAAE,sBAEzBO,eAAiB,SAASC,gBACpBR,EAAES,WAAWC,QAAQF,QAAQG,KAAK,eAG7CX,EAAE,iBAAiBY,GAAGX,aAAaY,OAAOC,WAAW,SAASC,EAAGC,MAE7DV,UAAYU,KAAKC,WAAWC,WAAWC,MAAMH,KAAKR,SAElDY,YAAW,WACPpB,EAAE,6BAA6BqB,MAAML,KAAKR,QAAQa,WACnD,QACJT,GAAGX,aAAaY,OAAOS,MAAM,SAASP,EAAGC,UAEpCO,SAAWP,KAAKQ,WAAWN,WAAWC,MAAMH,KAAKR,SACjDiB,EAAIT,KAAKR,QAAQkB,KAAK,yBACtBV,KAAKW,gBAAiB,KAClBC,QAAU,CACVC,WAAY,oCACZC,KAAM,CACFC,QAAS1B,QACT2B,MAAOP,EAAEd,KAAK,cACdsB,SAAUV,SAAWjB,YAG7BJ,KAAKgC,KAAK,CAACN,UAAU,GAAGO,KAAKhC,aAAaiC"}